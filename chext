#!/bin/sh

#
# chext
#
# Change the extension of a file.
#
# usage: chext foo.bar baz
# Moves foo.bar to foo.baz.
#

# perror()
## Print to stderr (file descriptor 2)
perror()
{
	printf "%b" "$*" >&2;
}

print_usage()
{
	perror "usage: $0 [-iv] file [file_2] [file_3] ... extension\n"
}

flags=""
# Process options
## Add each encountered option to $flags
while getopts "iv" option; do
	case "$option" in
		i)
			flags="${flags}i"
			;;
		v)
			flags="${flags}v"
			;;
		*)
			;;
	esac
done
## If there were any options, prefix them with '-'
if [ -n "$flags" ]; then
	flags="-${flags}"
fi

# Shift the argument pointer past all options
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Make sure that there exists at least one file and an extension
## Exit 2 if the passed arguments were insufficient
if [ $# -lt 2 ]; then
	print_usage
	exit 2
fi

# Get the extension as $ext
## Get the last argument (i.e., the extension)
for ext; do
	true
done
## Remove up to the first period
case $ext in
	.*)
		ext=${ext##\.}
		;;
	*)
		;;
esac

# Change the extensions of the passed files
while [ $# -ge 2 ]; do
	errmsg_noext="$0: change extension of $1 to \"$ext\": $1 has no extension\n"
	errmsg_nofile="$0: change extension of $1 to \"$ext\": $1 does not exist\n"

	# Check to see if the passed file exists
	if [ ! -e "$1" ]; then
		perror "$errmsg_nofile"
		shift
		continue
	fi

	# Extract the file's name from its path
	filename="${1##*/}"

	# Check to see if $filename has '.' in it
	case "$filename" in
		*.*)
			;;
		*)
			perror "$errmsg_noext"
			shift
			continue
			;;
	esac

	# Check to see if $filename is just hidden and has no extension
	if [ -z "${filename%\.*}" ]; then
		perror "$errmsg_noext"
		shift
		continue
	fi

	# Change the extension
	if [ -z "$flags" ]; then
		mv "$1" "${1%\.*}.$ext"
	else
		mv "$flags" "$1" "${1%\.*}.$ext"
	fi

	# Go to the next argument
	shift
done
